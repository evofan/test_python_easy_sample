■4-1クラス
この本では設計図→製品で説明

クラス→インスタンス

class クラス名:
    関数の定義
    変数の定義

例：
>>> class Fruits:
...     color = "red"
...     def taste(self):
...         return "delicious!"
...
>>> apple = Fruits()
>>> apple.color
'red'
>>> apple.taste()
'delicious!'
>>>

□オブジェクト
・オブジェクトはデータとメソッドを持つもの

>>> color="green"
>>> color.count("e")
2
>>> color.upper()
'GREEN'
>>>
・データ型もデータとメソッドを持つのでオブジェクトである
（↑の文字列型もgreenというデータと文字列型のメソッドを持っている）

・クラスもデータとメソッドを持つのでオブジェクトである

□self
クラスの中にメソッドを定義する場合、引数でselfを渡す

>>> class Stuff:
...     bonus = 30000
...     def salary(self):
...         salary = 10000 + bonus
...         return salary
...
>>> yamada = Stuff()
>>> yamada.salary()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 4, in salary
NameError: name 'bonus' is not defined

>>> class Stuff:
...     bonus = 30000
...     def salary(self):
...         salary = 10000 + self.bonus
...         return salary
...
>>> yamada = Stuff()
>>> yamada.salary()
40000
>>>

□__init__メソッド
インスタンス化じに引数を渡して定義出来る
>>> class Stuff():
...     def __init__(self, bonus):
...         self.bonus = bonus
...     def salary(self):
...         salary = 10000 + self.bonus
...         return salary
...
>>> suzuki = Stuff(50000)
>>> suzuki.salary()
60000
>>>


■4-2継承
親クラス→子クラス

class クラス名(親クラス名):
    変数
    def メソッド名():
        処理

>>> class AnimalBaseClass:
...     animallegs=4
...     def walk(self):
...         print("歩く")
...     def cry(self):
...         print("鳴く")
...     def getLegsNum(self):
...         print(self.animallegs)
...             
>>> class dogClass(AnimalBaseClass):
...     def __init__(self):
...         print("犬です")
...
>>> wanko=dogClass()
犬です
>>> wanko.walk()
歩く
>>> wanko.cry()
鳴く
>>> wanko.getLegsNum()
4
>>>

・オーバーライド
>>> class AnimalBaseClass:
...     animallegs=2
...     def walk(self):
...         print("歩く")
...     def cry(self):
...         print("鳴く")
...
>>> class BirdClass(AnimalBaseClass):
...     def __init__(self):
...         print("鳥です")
...     def cry(self):
...         print("ぴよぴよ")
...
>>> piyosuke = BirdClass()
鳥です
>>> piyosuke.walk()
歩く
>>> piyosuke.cry()
ぴよぴよ
>>>

↑同名メソッドを子クラスで定義すると、子クラスの方が実行される＝オーバーライド


>>> class AnimalBaseClass:
...     def __init__(self, num):
...         self.animallegs = num;
...     def walk(self):
...         print("歩く")
...     def cry(self):
...         print("鳴く")
...     def getLegsNum(self):
...         print(self.animallegs)


>>> class SnakeClass(AnimalBaseClass):
...     def __init__(self, num):
...         parent_class = super(SnakeClass, self)
...         parent_class.__init__(num)
...         print("蛇です")

>>> nyoro = SnakeClass(0)
蛇です
>>> nyoro.getLegsNum()
0

★super(子クラス名, インスタンス)で親クラスの初期化メソッドを呼んでいる


■4-3標準ライブラリ