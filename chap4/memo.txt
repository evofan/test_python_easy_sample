■4-1クラス
この本では設計図→製品で説明

クラス→インスタンス

class クラス名:
    関数の定義
    変数の定義

例：
>>> class Fruits:
...     color = "red"
...     def taste(self):
...         return "delicious!"
...
>>> apple = Fruits()
>>> apple.color
'red'
>>> apple.taste()
'delicious!'
>>>

□オブジェクト
・オブジェクトはデータとメソッドを持つもの

>>> color="green"
>>> color.count("e")
2
>>> color.upper()
'GREEN'
>>>
・データ型もデータとメソッドを持つのでオブジェクトである
（↑の文字列型もgreenというデータと文字列型のメソッドを持っている）

・クラスもデータとメソッドを持つのでオブジェクトである

□self
クラスの中にメソッドを定義する場合、引数でselfを渡す

>>> class Stuff:
...     bonus = 30000
...     def salary(self):
...         salary = 10000 + bonus
...         return salary
...
>>> yamada = Stuff()
>>> yamada.salary()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 4, in salary
NameError: name 'bonus' is not defined

>>> class Stuff:
...     bonus = 30000
...     def salary(self):
...         salary = 10000 + self.bonus
...         return salary
...
>>> yamada = Stuff()
>>> yamada.salary()
40000
>>>

□__init__メソッド
インスタンス化じに引数を渡して定義出来る
>>> class Stuff():
...     def __init__(self, bonus):
...         self.bonus = bonus
...     def salary(self):
...         salary = 10000 + self.bonus
...         return salary
...
>>> suzuki = Stuff(50000)
>>> suzuki.salary()
60000
>>>


■4-2継承
親クラス→子クラス

class クラス名(親クラス名):
    変数
    def メソッド名():
        処理

>>> class AnimalBaseClass:
...     animallegs=4
...     def walk(self):
...         print("歩く")
...     def cry(self):
...         print("鳴く")
...     def getLegsNum(self):
...         print(self.animallegs)
...             
>>> class dogClass(AnimalBaseClass):
...     def __init__(self):
...         print("犬です")
...
>>> wanko=dogClass()
犬です
>>> wanko.walk()
歩く
>>> wanko.cry()
鳴く
>>> wanko.getLegsNum()
4
>>>

・オーバーライド
>>> class AnimalBaseClass:
...     animallegs=2
...     def walk(self):
...         print("歩く")
...     def cry(self):
...         print("鳴く")
...
>>> class BirdClass(AnimalBaseClass):
...     def __init__(self):
...         print("鳥です")
...     def cry(self):
...         print("ぴよぴよ")
...
>>> piyosuke = BirdClass()
鳥です
>>> piyosuke.walk()
歩く
>>> piyosuke.cry()
ぴよぴよ
>>>

↑同名メソッドを子クラスで定義すると、子クラスの方が実行される＝オーバーライド


>>> class AnimalBaseClass:
...     def __init__(self, num):
...         self.animallegs = num;
...     def walk(self):
...         print("歩く")
...     def cry(self):
...         print("鳴く")
...     def getLegsNum(self):
...         print(self.animallegs)


>>> class SnakeClass(AnimalBaseClass):
...     def __init__(self, num):
...         parent_class = super(SnakeClass, self)
...         parent_class.__init__(num)
...         print("蛇です")

>>> nyoro = SnakeClass(0)
蛇です
>>> nyoro.getLegsNum()
0

★super(子クラス名, インスタンス)で親クラスの初期化メソッドを呼んでいる


■4-3標準ライブラリ
ライブラリ内＞モジュール群

標準ライブラリ、importして使う
>>> import calendar
>>> print(calendar.month(2021,2))
   February 2021
Mo Tu We Th Fr Sa Su
 1  2  3  4  5  6  7
 8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28

短縮形
>>> import calendar as cal
>>> print(cal.month(2015,8))
    August 2015
Mo Tu We Th Fr Sa Su
                1  2
 3  4  5  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30
31

・from
fromを使ってパッケージから特定のモジュールやクラス・関数を使える

from パッケージ（モジュール）名 import モジュール（クラス、関数）名
>>> from calendar import month, isleap
>>> print(month(2015,9))
   September 2015
Mo Tu We Th Fr Sa Su
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30

>>> isleap(2012)　★うるう年か
True
>>>

from無しでは
>>> import calendar
>>> calendar.isleap(2012)
と書く必要がある

・その他の標準ライブラリ
Pythonには多くの標準ライブラリがある

Python 標準ライブラリ 3.8.8
https://docs.python.org/ja/3.8/library/

■日付や時刻に関する標準ライブラリ
・datetimeモジュール

datetime --- 基本的な日付型および時間型
https://docs.python.org/ja/3.8/library/datetime.html

今日の日付を取得する
>>> from datetime import date
>>> date.today()
datetime.date(2021, 2, 27)
>>>

date型のデータを文字列に変換する
>>> from datetime import date
>>> today.strftime('%y%m%d')
'210228'
>>> today.strftime('%Y/%m/%d')
'2021/02/28'
>>> today.strftime('%Y %B %d %a')
'2021 February 28 Sun'



現在の日付と時刻を取得する
>>> from datetime import datetime
>>> datetime.now()
datetime.datetime(2021, 3, 1, 23, 49, 3, 283734)
>>>

>>> from datetime import datetime as dt
>>> now = dt.now()
>>> now.strftime('%Y-%m-%d %H;%M;%S')
'2021-03-01 23;50;18'
>>>

一週間後の日付を設定する
>>> today = date.today()
>>> today
datetime.date(2021, 3, 2)
>>> one_week = timedelta(days=7)
>>> today + one_week
datetime.date(2021, 3, 9)
>>> today - one_week
datetime.date(2021, 2, 23)
>>>

zipファイルの解凍
>>> import zipfile
>>> files = zipfile.ZipFile('python-3.9.0-embed-amd64.zip')
>>> files.namelist()
['python.exe', 'pythonw.exe', 'python39.dll', 'python3.dll', 'vcruntime140.dll', 'vcruntime140_1.dll', 'LICENSE.txt', 'pyexpat.pyd', 'select.pyd', 'unicodedata.pyd', 'winsound.pyd', '_asyncio.pyd', '_bz2.pyd', '_ctypes.pyd', '_decimal.pyd', '_elementtree.pyd', '_hashlib.pyd', '_lzma.pyd', '_msi.pyd', '_multiprocessing.pyd', '_overlapped.pyd', '_queue.pyd', '_socket.pyd', '_sqlite3.pyd', '_ssl.pyd', '_uuid.pyd', '_zoneinfo.pyd', 'libcrypto-1_1.dll', 'libffi-7.dll', 'libssl-1_1.dll', 'sqlite3.dll', 'python39.zip', 'python39._pth', 'python.cat']
>>> files.extract('python.exe')
'C:\\Users\\USER\\Desktop\\test\\python.exe'
>>> files.extractall()
>>> files.close()
>>>

ファイルの圧縮
>>> import zipfile
>>> zip_file = zipfile.ZipFile('python_code.zip', mode='w')
>>> zip_file.close()
>>> file = zipfile.ZipFile('python_code.zip')
>>> file.namelist()
[]

d