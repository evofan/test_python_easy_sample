pythonではインデントが重要なので注意：

条件分岐

if xx :
    yy（半角x4でインデント、4つが慣例）

>>> age = 29
>>> if (18 <= age): ★age >= 18でも可
...     print('チケットを売る')
...
チケットを売る
>>>

>>> age = 15
>>> if (18 <= age):
...     print('チケットを売る')
...
>>> ※何も表示されないでおｋ

elseを追加

>>> age = 16
>>> age
16
>>> if(age>=18):
...     print('チケットを売る')
... else:
...     print('チケットを売らない')
...
チケットを売らない
>>>

else～ifを追加
>>> age = 70
>>> if(age>=70):
...     print('チケットは1000円です')
... elif(age>=18):
...     print('チケットは1800円です')
... else:
...     print('チケットは売れません')
...
チケットは1000円です
>>>

条件分岐を工夫する
>>> age = 50
>>> if(age>=18 & age<=59):
...     print('チケットは1800円です')
... elif(age>=60):
...     print('チケットは1000円です')
... else:
...     print('チケットは売れません')
...
チケットは1800円です
>>>

複数の条件分岐
>>> pointcard = True
>>> count = 5
>>> if(pointcard == True):
...     if(count == 5):
...         print('いつもありがとうございます。今回は1000円です')
...
いつもありがとうございます。今回は1000円です
>>>

複数の条件分岐を入れ子でなくまとめて記述
>>> pointcard = True
>>> count = 5
>>> (pointcard = True)
  File "<stdin>", line 1
    (pointcard = True)
               ^
SyntaxError: invalid syntax
>>> (pointcard == True)
True
>>> (count == 5)
True
>>> ((pointcard == True) and (count == 5))
True
>>>

片方がFalseの場合
>>> ((pointcard == True) and (count == 7))
False


>>> pointcard = True
>>> count = 5
>>> if ((pointcard == True) and (count == 5)):
...     print('いつもありがとうございます、今回は1000円です')
...
いつもありがとうございます、今回は1000円です
>>>


>>> age = 35
>>> pointcard = True
>>> count = 5
>>> if(age < 18):
...     print('チケットを売ることはできません')
... elif ((age >= 60) or (pointcard == True) and (count == 5)):
...     print('チケットは1000円です')
... else:
...     print('チケットは1800円です')
...
チケットは1000円です
>>>

□3-2 繰り返し
>>> for count in range(3):
...     print('繰り返します')
...     print(count)
...
繰り返します
0
繰り返します
1
繰り返します
2
>>>

forの応用
>>> word = 'ninja'
>>> for chara in word:
...     print(chara)
...
n
i
n
j
a
>>>

for 変数 in データ:
で、データに対して同じ処理を実行出来る


リスト型に対して繰り返し
>>> music_list = ['DEATH METAL', 'ROCK', 'ANIME', 'JPOP']
>>> for music in music_list:
...     print('Now playing... ' + music)
...
Now playing... DEATH METAL
Now playing... ROCK
Now playing... ANIME
Now playing... JPOP
>>>

辞書型に対して繰り返し
>>> menu = {'ラーメン': 500, 'チャーハン':430, '餃子': 210}
>>> for order in menu:
...     print(order)
...     print(menu[order] * 1.10)
...
ラーメン
550.0
チャーハン
473.00000000000006
餃子
231.00000000000003
>>>
orderには辞書型のキーが入る事に注意

while (条件式):
    繰り返し処理
>>> counter = 0
>>> while (counter < 5):
...     print(counter)
...     counter+=1
...
0
1
2
3
4
>>>

無限ループ
>>> counter = 0
>>> while (counter < 5):
...     print(counter)
...
0
0
0
0
0
0
0
0
0
0

・break
>>> power = 2
>>> while(True):
...     print('パンチ')
...     print('キック')
...     print('必殺奥義')
...     power -=1
...     if(power==0):
...         break
...
パンチ
キック
必殺奥義
パンチ
キック
必殺奥義
>>>

・contnue
繰り返し処理の中で使われ、continue後の処理をスキップして繰り返しに戻る
>>> family = ["a-ko","b-ko","c-ko"]
>>> for kid in family:
...     print("お早う" + kid)
...     print("起床")
...     print("朝ごはん")
...     continue
...     print("学校に行く")
...
お早うa-ko
起床
朝ごはん
お早うb-ko
起床
朝ごはん
お早うc-ko
起床
朝ごはん
>>>


■■関数
関数を使うにはdefというキーワードを使う
def 関数名():
    処理1
    処理2

>>> def washingMachine():
...     print("給水します")
...     print("洗います")
...     print("すすぎます")
...     print("脱水します")
...     print("乾燥します")
...
>>> washingMachine()
給水します
洗います
すすぎます
脱水します
乾燥します
>>>

>>> def softWash():
...     print("給水します")
...     print("やさしく洗います")
...     print("`susugimasu")
...     print("脱水します")
...     print("乾燥します")
...
>>> mode="soft"
>>> v
...     print("やさしく洗う")
... elif(mode=="hard"):
...     print("はげしく洗う")
... else:
...     print("普通に洗う")
...

関数内に条件分岐＆引数でパラメーター渡し
>>> def washingMachine(mode):
...     print('給水します')
...     if(mode=='soft'):
...         print('やさしく洗う')
...     elif(mode=='hard'):
...         print('激しく洗う')
...     else:
...         print('普通に洗う')
...
>>> washingMachine('hard')
給水します
激しく洗う
>>>

■返り値を返す
>>> def area(radius):
...     result = radius * radius * 3.14
...     return result
...
>>> area(5)
78.5
>>>


■ビルトイン関数
文字数を返す
>>> len("thunderbird")
11

要素の数を数える
>>> animal = ['cat','dog','duck']
>>> len(animal)
3

最大値を返す
>>> max(100,7,55)
100
>>>

最小値を返す
>>> min(3,78,124)
3
>>> min('thunderbird')
'b'

>>> min('1Aab')
'1'

>>> max('1Aab')
'b'

数字＞大文字＞小文字

>>> sorted([100,27,59,43,10,61])
[10, 27, 43, 59, 61, 100]
>>>

>>> print(100+3)
103

>>> type(100)
<class 'int'>
>>> type("あああ")
<class 'str'>
>>>
>>> type([1,2,3,4])
<class 'list'>
>>>

>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>>

>>> dir(int)
['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'as_integer_ratio', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']
>>>

>>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'animal', 'area']
>>>

3-4 エラーと例外
