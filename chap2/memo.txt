pythonではインデントが重要なので注意：

def happy():
    print('life')
↑ok

def happy():
print('life')
↑エラー

pythonでの加算乗除算

四則演算、+-*/
剰余、%
べき乗、**

j又はJを使って複素数の計算も可能

2-3 変数
>>> tax = 0.08
>>> price=120
>>> tel='01203456789'
>>>
0.08
>>> price
120
>>> tel
'01203456789'
>>> price * tax
9.6
>>> 120*0.8
96.0
>>> 120*0.08
9.6

変数名の規則
・先頭に数字は使えない
・予約語（Trueやclass等）は使えない
>>> import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
>>>

2-4 比較演算子
>>> 34 > 22
True
>>> 34<22
False
>>>

>
>=
<
<=
==
!=
ほぼJSと同じ

2-5 データの種類（型）

数値型

・整数、int
>>> 34 + 56
90
>>> number = 55
>>>

・浮動小数点数（少数）、float
>>> 5  + 3.4
8.4
>>> 5 / 2
2.5

・複素数、complex
複素数を表す時は、虚数部をj又はJで表す
又、虚数部の係数が1の時も1を省略しない
>>> complex = 5 + 5j
>>> complex + (3 + 1j)
(8+6j)

文字列型
'又は"で囲む
>>> 'happy birthday'
'happy birthday'
>>> message = "おめでとう！"

どちらを3つ重ねると複数の文字列を表す、\nは改行を表す
>>> '''
... Sunday
... Monday
... Tuesday
... '''
'\nSunday\nMonday\nTuesday\n'

文字列の連結
>>> 'thunder' + 'bolt'
'thunderbolt'
>>>

>>> 'hunter' * 2
'hunterhunter'
>>>

大文字に変換、小文字に変換
>>> text = 'hello'
>>> text.upper()
'HELLO'
>>> text.lower()
'hello'
>>>

指定した文字数を数える
>>> text = 'maintenance'
>>> text.count('n')
3
>>>

論理（ブール）型
>>> 46 < 64
True
>>> 46 > 64
False
>>>
※pythonでは先頭が大文字なので注意


■リスト型、※配列とは別？
複数のデータを1まとまり（リスト）に出来る
>>> Agroup = ['kazu', 'gorou']
>>> Bgroup = ['shun', 'haruka']
>>>

リストに要素を追加
>>> Agroup.append('dai')
>>> Agroup
['kazu', 'gorou', 'dai']
>>>

リストから要素を削除する
>>> Agroup.remove('kazu')
>>> Agroup
['gorou', 'dai']
>>>

リスト内の要素を並び替える
>>> Agroup
['dai', 'gorou']
>>>

>>> Cgroup = [87,55,99,50,66,78]
>>> Cgroup
[87, 55, 99, 50, 66, 78]
>>> Cgroup.sort()
>>> Cgroup
[50, 55, 66, 78, 87, 99]
>>>


■辞書型（ディクショナリ）、※JSの連想配列？
キーと値をセットで格納する
>>> activities = { 'Monday': 'バスケ', 'Tuesday': '自転車', 'Wednesday': '軽音', 'Friday': '水泳'}
>>> activities
{'Monday': 'バスケ', 'Tuesday': '自転車', 'Wednesday': '軽音', 'Friday': '水泳'}
>>> activities['Friday']
'水泳'
>>>

辞書型のメソッド
>>> activities.keys()
dict_keys(['Monday', 'Tuesday', 'Wednesday', 'Friday'])
>>> activities.values()
dict_values(['バスケ', '自転車', '軽音', '水泳'])
>>>

■タプル型
タプル＝複数の要素からなる一組、二重：ダブル、三重：トリプル、四重：タプル、五重：タプル、…
書式：
(要素A, 要素B, 要素C, .....)
>>> tuple_sample = ('apple', 3, 90.4)
>>> print(tuple_sample)
('apple', 3, 90.4)
>>>

①タプルはリストと違って、定義後に要素の変更が出来ない

リスト：
>>> flavor_list = ['ミント', 'チョコ', 'ストロベリー', 'バニラ']
>>> flavor_list[0] = 'レーズン'
>>> flavor_list
['レーズン', 'チョコ', 'ストロベリー', 'バニラ']
>>>

タプル：
>>> flavor_tuple = ('ミント', 'チョコ', 'ストロベリー', 'バニラ')
>>> flavor_tuple[0] = 'レーズン'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> flavor_tuple
('ミント', 'チョコ', 'ストロベリー', 'バニラ')
>>>

②タプル型は、辞書のキーとして使えるが、リスト型は使えない
>>> diary = {}
>>> key = ('kamata', '08-01')
>>> diary[key] = '70kg'
>>> print(diary)
{('kamata', '08-01'): '70kg'}
>>>

>>> diary = {}
>>> key = ['nakata', '08-01']
>>> diary[key] = '50kg'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>>

■集合型（セット）
リストやタプルと同様に複数のデータを1つにまとめる事が出来る型
辞書型と同じ{}を使い、リスト型やタプル型と同様に要素を並べて定義
>>> candy = {'delicious', 'fantastic'}
>>> print(candy)
{'delicious', 'fantastic'}
>>>

set()を使って集合型を定義出来る
>>> candy2 = set('delicious')
>>> print(candy2)
{'o', 'e', 'u', 'd', 'c', 's', 'l', 'i'}
>>>
・1つずつバラバラになる
・順番も保存されないのでバラバラになる
・重複（今回だと'i'）は持たないので1つになる

リスト型を使ってから、set()を使って集合型を定義
>>> flavor = ['apple', 'peach', 'soda']
>>> candy = set(flavor)
>>> candy
{'soda', 'peach', 'apple'}
>>> candy.update(['grape']) ★リスト型として渡す
>>> candy
{'soda', 'peach', 'apple', 'grape'}
>>>

□集合型の使い方①重複を削除する
pythonでデータを扱う時は主にリスト型を使うが、重複するデータを除きたい場合、
一旦集合型に変換し、重複データを除いた後にリスト型に変換する
>>> flavor = ['apple', 'soda', 'chocolate', 'apple', 'grape', 'grape', 'peach', 'soda']
>>> flavor_set = set(flavor)
>>> print(flavor_set)
{'chocolate', 'peach', 'grape', 'soda', 'apple'}
>>> flavor = list(flavor_set)
>>> print(flavor)
['chocolate', 'peach', 'grape', 'soda', 'apple']
>>>

□集合型の使い方②複数のデータ同士の計算
>>>
>>> flavor_set_A = {'apple', 'peach', 'soda'}
>>> flavor_set_B = {'apple', 'soda', 'chocolate'}
>>> flavor_set_A - flavor_set_B ★flavor_set_AからBとの共通のデータを除いた結果を表示する
{'peach'}
>>> flavor_set_A & flavor_set_B ★flavor_set_AとBの共通のデータを表示する
{'soda', 'apple'}
>>>